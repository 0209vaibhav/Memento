rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Function to check if basic fields are present
    function hasBasicFields(data) {
      return data.name is string &&
             data.userId is string;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Mementos collection - all authenticated users can read all mementos
    match /mementos/{mementoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                             resource.data.userId == request.auth.uid;
    }
    
    // Memento drafts collection
    match /memento_drafts/{draftId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
    }
  }
} 